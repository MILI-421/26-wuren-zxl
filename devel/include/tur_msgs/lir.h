// Generated by gencpp from file tur_msgs/lir.msg
// DO NOT EDIT!


#ifndef TUR_MSGS_MESSAGE_LIR_H
#define TUR_MSGS_MESSAGE_LIR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tur_msgs
{
template <class ContainerAllocator>
struct lir_
{
  typedef lir_<ContainerAllocator> Type;

  lir_()
    : turtle_linear(0.0)  {
    }
  lir_(const ContainerAllocator& _alloc)
    : turtle_linear(0.0)  {
  (void)_alloc;
    }



   typedef float _turtle_linear_type;
  _turtle_linear_type turtle_linear;





  typedef boost::shared_ptr< ::tur_msgs::lir_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tur_msgs::lir_<ContainerAllocator> const> ConstPtr;

}; // struct lir_

typedef ::tur_msgs::lir_<std::allocator<void> > lir;

typedef boost::shared_ptr< ::tur_msgs::lir > lirPtr;
typedef boost::shared_ptr< ::tur_msgs::lir const> lirConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tur_msgs::lir_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tur_msgs::lir_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tur_msgs::lir_<ContainerAllocator1> & lhs, const ::tur_msgs::lir_<ContainerAllocator2> & rhs)
{
  return lhs.turtle_linear == rhs.turtle_linear;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tur_msgs::lir_<ContainerAllocator1> & lhs, const ::tur_msgs::lir_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tur_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tur_msgs::lir_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tur_msgs::lir_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tur_msgs::lir_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tur_msgs::lir_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tur_msgs::lir_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tur_msgs::lir_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tur_msgs::lir_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b17f578a1d094a85f0845837e7f90e5c";
  }

  static const char* value(const ::tur_msgs::lir_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb17f578a1d094a85ULL;
  static const uint64_t static_value2 = 0xf0845837e7f90e5cULL;
};

template<class ContainerAllocator>
struct DataType< ::tur_msgs::lir_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tur_msgs/lir";
  }

  static const char* value(const ::tur_msgs::lir_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tur_msgs::lir_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 turtle_linear #定义一个变量，用于存储线速度\n"
;
  }

  static const char* value(const ::tur_msgs::lir_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tur_msgs::lir_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.turtle_linear);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lir_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tur_msgs::lir_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tur_msgs::lir_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "turtle_linear: ";
    Printer<float>::stream(s, indent + "  ", v.turtle_linear);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUR_MSGS_MESSAGE_LIR_H
